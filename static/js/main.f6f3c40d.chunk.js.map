{"version":3,"sources":["pages/NavBar/NavBar.tsx","pages/Main/Main.tsx","pages/Resume/Resume.tsx","pages/About/About.tsx","pages/Contact/Contact.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["NavBar","useState","navbar","setNavbar","window","addEventListener","scrollY","className","onClick","animateScroll","scrollToTop","to","smooth","duration","offset","Main","id","Resume","About","Contact","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gYA+CeA,G,MA3CA,WAAO,IAAD,EACQC,oBAAS,GADjB,mBACZC,EADY,KACJC,EADI,OAETF,oBAAS,GAFA,eAgBnB,OAHAG,OAAOC,iBAAiB,UATC,WACpBD,OAAOE,SAAW,GACnBH,GAAU,GAGVA,GAAU,MAQZ,yBAAKI,UAAWL,EAAS,aAAe,OACtC,yBAAKK,UAAU,YAAYC,QAAS,kBAAMC,gBAAcC,gBAAxD,QAGA,6BACE,kBAAC,OAAD,CAAMH,UAAU,cAAcI,GAAG,SAASC,QAAQ,EAAMC,SAAU,IAAMC,QAAS,IAAjF,WAIF,6BACE,kBAAC,OAAD,CAAMP,UAAU,aAAaI,GAAG,QAAQC,QAAQ,EAAMC,SAAU,IAAMC,QAAS,IAA/E,UAIF,6BACE,kBAAC,OAAD,CAAMP,UAAU,eAAeI,GAAG,UAAUC,QAAQ,EAAMC,SAAU,IAAMC,QAAS,IAAnF,eCtBOC,G,MAXF,WACX,OACE,6BAASC,GAAG,QACV,yBAAKT,UAAY,YACf,yBAAKA,UAAU,MAAf,cACA,yBAAKA,UAAU,MAAf,YACA,yBAAKA,UAAU,MAAf,6BC+FOU,G,MArGA,WACb,OACE,6BAASD,GAAG,UACV,yBAAKT,UAAU,gBACb,wBAAIA,UAAU,aAAd,MACA,wBAAIA,UAAU,aAAd,WAEF,yBAAKA,UAAU,kBACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,eAAf,aAGA,yBAAKA,UAAU,UACb,uBAAGA,UAAU,cAAb,wBAGA,uBAAGA,UAAU,eAAb,uBAGA,uBAAGA,UAAU,aAAb,yDACwD,6BADxD,aAIA,uBAAGA,UAAU,gBAAb,2BAIF,yBAAKA,UAAU,UACb,uBAAGA,UAAU,cAAb,gCAGA,uBAAGA,UAAU,eAAb,wCAGA,uBAAGA,UAAU,aAAb,mEAEE,6BAFF,WAIA,uBAAGA,UAAU,gBAAb,sCAKF,yBAAKA,UAAU,UACb,uBAAGA,UAAU,eAGb,uBAAGA,UAAU,gBAGb,uBAAGA,UAAU,aACX,8BAEF,uBAAGA,UAAU,mBAOjB,yBAAKA,UAAU,OACb,yBAAKA,UAAU,eAAf,eAGA,yBAAKA,UAAU,UACb,uBAAGA,UAAU,cAAb,sBAGA,uBAAGA,UAAU,eAAb,iCAGA,uBAAGA,UAAU,aAAb,0DACyD,6BADzD,uBAGA,uBAAGA,UAAU,gBAAb,6BAKF,yBAAKA,UAAU,UACb,yBAAKA,UAAU,cAAf,gCAGA,yBAAKA,UAAU,eAAf,2BAGA,yBAAKA,UAAU,aAAf,6DAC4D,6BAD5D,8DAIA,yBAAKA,UAAU,gBAAf,iDC7EGW,G,MAXD,WACZ,OACE,6BAASF,GAAG,SACV,yBAAKT,UAAU,eACb,wBAAIA,UAAU,YAAd,SACA,wBAAIA,UAAU,YAAd,UCMOY,G,MAXC,WACd,OACE,6BAASH,GAAG,WACV,yBAAKT,UAAU,iBACb,wBAAIA,UAAU,cAAd,OACA,wBAAIA,UAAU,cAAd,gBCMOa,MAZf,WACE,OACE,yBAAKb,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCCcc,QACW,cAA7BjB,OAAOkB,SAASC,UAEe,UAA7BnB,OAAOkB,SAASC,UAEhBnB,OAAOkB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f6f3c40d.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Link, animateScroll } from \"react-scroll\";\nimport \"./NavBar.css\";\n\nconst NavBar = () => {\n  const [navbar, setNavbar]= useState(false);\n  const []= useState(false);\n\n  const changeBackGround = () => {\n    if(window.scrollY >= 50) {\n      setNavbar(true);\n    }\n    else{\n      setNavbar(false);\n    }\n  }\n\n  window.addEventListener('scroll', changeBackGround);\n\n\n  return (\n    <nav className={navbar ? \"nav active\" : \"nav\"}>\n      <div className=\"link home\" onClick={() => animateScroll.scrollToTop() } >\n        HOME\n      </div>\n      <div>\n        <Link className=\"link resume\" to=\"resume\" smooth={true} duration={1000} offset={-80}>\n          RESUME\n        </Link>\n      </div>\n      <div>\n        <Link className=\"link about\" to=\"about\" smooth={true} duration={1000} offset={-80}>\n          ABOUT\n        </Link>\n      </div>\n      <div>\n        <Link className=\"link contact\" to=\"contact\" smooth={true} duration={1000} offset={-80}>\n          CONTACT\n        </Link>\n      </div>\n    </nav>\n  );\n};\n\n\n\n\nexport default NavBar;\n\n","import React from \"react\";\nimport \"./Main.css\";\n\nconst Main = () => {\n  return (\n    <section id=\"main\">\n      <div className = \"titlebox\">\n        <div className=\"p1\">Hello, I'm</div>\n        <div className=\"p2\">Lucas Li</div>\n        <div className=\"p3\">AND THIS IS MY RESUME</div>\n      </div>\n    </section>\n  );\n};\nexport default Main;\n","import React from \"react\";\nimport \"./Resume.css\";\n\nconst Resume = () => {\n  return (\n    <section id=\"resume\">\n      <div className=\"resume-title\">\n        <h1 className=\"resume-t1\">My</h1>\n        <h1 className=\"resume-t2\">Resume</h1>\n      </div>\n      <div className=\"resume-content\">\n        <div className=\"edu\">\n          <div className=\"restext edu\">\n            Education\n          </div>\n          <div className=\"resbox\">\n            <p className=\"resboxtime\">\n              March 2019 - Present\n            </p>\n            <p className=\"resboxtitle\">\n              Bachelor of Science\n            </p>\n            <p className=\"resboxdes\">\n              Majoring in Computer Science and Logic and Computation<br />\n              GPA: 7.33\n            </p>\n            <p className=\"resboxentity\">\n              University of Auckland\n            </p>\n          </div>\n          <div className=\"resbox\">\n            <p className=\"resboxtime\">\n              February 2018 - October 2018\n            </p>\n            <p className=\"resboxtitle\">\n              Bachelor of Engineering with Honours \n            </p>\n            <p className=\"resboxdes\">\n              Majoring in software engineering. Discontinued after first year.\n              <br/>rfcgfgh\n            </p>\n            <p className=\"resboxentity\">\n              Victoria University of Wellington \n            </p>\n          </div>\n\n          <div className=\"resbox\">\n            <p className=\"resboxtime\">\n              \n            </p>\n            <p className=\"resboxtitle\">\n              \n            </p>\n            <p className=\"resboxdes\">\n              <br/>\n            </p>\n            <p className=\"resboxentity\">\n              \n            </p>\n          </div>\n\n        </div>\n\n        <div className=\"exp\">\n          <div className=\"restext exp\">\n            Experiences\n          </div>\n          <div className=\"resbox\">\n            <p className=\"resboxtime\">\n              May 2019 - Present\n            </p>\n            <p className=\"resboxtitle\">\n              Property Management Assistant\n            </p>\n            <p className=\"resboxdes\">\n              Part-time AirBnB host for a New Zealand based property <br/> management company\n            </p>\n            <p className=\"resboxentity\">\n              Toodle Airbnb Management\n            </p>\n          </div>\n\n          <div className=\"resbox\">\n            <div className=\"resboxtime\">\n            December 2019 - January 2020\n            </div>\n            <div className=\"resboxtitle\">\n              Software Testing Intern \n            </div>\n            <div className=\"resboxdes\">\n              Took part in the development of a map labelling software. <br/>\n              Key responsibilities: Integration, user interface testing.\n            </div>\n            <div className=\"resboxentity\">\n              Jiangsu Digitaland Technology Co., Ltd.\n            </div>\n          </div>\n        </div>\n\n      </div>\n\n    </section>\n  );\n};\nexport default Resume;\n","import React from \"react\";\nimport \"./About.css\";\n\n\n\nconst About = () => {\n  return (\n    <section id=\"about\">\n      <div className=\"about-title\">\n        <h1 className=\"about-t1\">About</h1>\n        <h1 className=\"about-t2\">Me</h1>\n      </div>\n    </section>\n  );\n};\n\nexport default About;","import React from \"react\";\nimport \"./Contact.css\";\n\n\n\nconst Contact = () => {\n  return (\n    <section id=\"contact\">\n      <div className=\"contact-title\">\n        <h1 className=\"contact-t1\">Get</h1>\n        <h1 className=\"contact-t2\">In Touch</h1>\n      </div>\n    </section>\n  );\n};\n\nexport default Contact;\n","import React from \"react\";\nimport \"./App.css\";\nimport { NavBar, Main, About, Resume, Contact } from \"./pages\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <NavBar />\n      <Main />\n      <Resume />\n      <About />\n      <Contact />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}